//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.DRMRRBRRMProyectoIPS
{
	/// <summary>
	/// DomainRelationship FONDOHasClase
	/// Description for UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.DisplayName", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.Description", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3590e321-9ce0-4161-bca1-80950921583b")]
	public partial class FONDOHasClase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FONDOHasClase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3590e321, 0x9ce0, 0x4161, 0xbc, 0xa1, 0x80, 0x95, 0x09, 0x21, 0x58, 0x3b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FONDOHasClase link in the same Partition as the given FONDO
		/// </summary>
		/// <param name="source">FONDO to use as the source of the relationship.</param>
		/// <param name="target">Clase to use as the target of the relationship.</param>
		public FONDOHasClase(FONDO source, Clase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FONDOHasClase.FONDODomainRoleId, source), new DslModeling::RoleAssignment(FONDOHasClase.ClaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FONDOHasClase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FONDOHasClase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FONDOHasClase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FONDOHasClase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FONDO domain role code
		
		/// <summary>
		/// FONDO domain role Id.
		/// </summary>
		public static readonly global::System.Guid FONDODomainRoleId = new global::System.Guid(0x19b70366, 0xa755, 0x4ad0, 0xba, 0x28, 0x6d, 0x28, 0x44, 0x97, 0x4b, 0xfe);
		
		/// <summary>
		/// DomainRole FONDO
		/// Description for UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.FONDO
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase/FONDO.DisplayName", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase/FONDO.Description", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Clase", PropertyDisplayNameKey="UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase/FONDO.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("19b70366-a755-4ad0-ba28-6d2844974bfe")]
		public virtual FONDO FONDO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FONDO)DslModeling::DomainRoleInfo.GetRolePlayer(this, FONDODomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FONDODomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FONDO of a Clase
		/// <summary>
		/// Gets FONDO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FONDO GetFONDO(Clase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClaseDomainRoleId) as FONDO;
		}
		
		/// <summary>
		/// Sets FONDO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFONDO(Clase element, FONDO newFONDO)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClaseDomainRoleId, newFONDO);
		}
		#endregion
		#region Clase domain role code
		
		/// <summary>
		/// Clase domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClaseDomainRoleId = new global::System.Guid(0x7cfbe718, 0x6383, 0x4b2c, 0x85, 0x23, 0x9a, 0xc0, 0xbe, 0x9a, 0x7c, 0x22);
		
		/// <summary>
		/// DomainRole Clase
		/// Description for UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.Clase
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase/Clase.DisplayName", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase/Clase.Description", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FONDO", PropertyDisplayNameKey="UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase/Clase.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7cfbe718-6383-4b2c-8523-9ac0be9a7c22")]
		public virtual Clase Clase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Clase of a FONDO
		/// <summary>
		/// Gets a list of Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Clase> GetClase(FONDO element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Clase>, Clase>(element, FONDODomainRoleId);
		}
		#endregion
		#region FONDO link accessor
		/// <summary>
		/// Get the list of FONDOHasClase links to a FONDO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase> GetLinksToClase ( global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDO fONDOInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase>(fONDOInstance, global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.FONDODomainRoleId);
		}
		#endregion
		#region Clase link accessor
		/// <summary>
		/// Get the FONDOHasClase link to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase GetLinkToFONDO (global::UPM_IPS.DRMRRBRRMProyectoIPS.Clase claseInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase>(claseInstance, global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.ClaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Clase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FONDOHasClase instance accessors
		
		/// <summary>
		/// Get any FONDOHasClase links between a given FONDO and a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase> GetLinks( global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDO source, global::UPM_IPS.DRMRRBRRMProyectoIPS.Clase target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase>(source, global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.FONDODomainRoleId);
			foreach ( global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase link in links )
			{
				if ( target.Equals(link.Clase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FONDOHasClase link between a given FONDOand a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase GetLink( global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDO source, global::UPM_IPS.DRMRRBRRMProyectoIPS.Clase target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase>(source, global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase.FONDODomainRoleId);
			foreach ( global::UPM_IPS.DRMRRBRRMProyectoIPS.FONDOHasClase link in links )
			{
				if ( target.Equals(link.Clase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.DRMRRBRRMProyectoIPS
{
	/// <summary>
	/// DomainRelationship ClaseHasAtributo
	/// Description for UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.DisplayName", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.Description", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4c18e2d7-b9ff-462b-8843-03922b6a7e8d")]
	public partial class ClaseHasAtributo : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClaseHasAtributo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4c18e2d7, 0xb9ff, 0x462b, 0x88, 0x43, 0x03, 0x92, 0x2b, 0x6a, 0x7e, 0x8d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClaseHasAtributo link in the same Partition as the given Clase
		/// </summary>
		/// <param name="source">Clase to use as the source of the relationship.</param>
		/// <param name="target">Atributo to use as the target of the relationship.</param>
		public ClaseHasAtributo(Clase source, Atributo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClaseHasAtributo.ClaseDomainRoleId, source), new DslModeling::RoleAssignment(ClaseHasAtributo.AtributoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClaseHasAtributo(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClaseHasAtributo(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClaseHasAtributo(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClaseHasAtributo(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Clase domain role code
		
		/// <summary>
		/// Clase domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClaseDomainRoleId = new global::System.Guid(0x0842f72e, 0x89de, 0x48b5, 0x83, 0x00, 0x88, 0x2d, 0x92, 0x53, 0x1a, 0x42);
		
		/// <summary>
		/// DomainRole Clase
		/// Description for UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.Clase
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo/Clase.DisplayName", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo/Clase.Description", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Atributo", PropertyDisplayNameKey="UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo/Clase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0842f72e-89de-48b5-8300-882d92531a42")]
		public virtual Clase Clase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Clase)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Clase of a Atributo
		/// <summary>
		/// Gets Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Clase GetClase(Atributo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AtributoDomainRoleId) as Clase;
		}
		
		/// <summary>
		/// Sets Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClase(Atributo element, Clase newClase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AtributoDomainRoleId, newClase);
		}
		#endregion
		#region Atributo domain role code
		
		/// <summary>
		/// Atributo domain role Id.
		/// </summary>
		public static readonly global::System.Guid AtributoDomainRoleId = new global::System.Guid(0x15c2d37f, 0x3376, 0x4dc2, 0x9e, 0x5a, 0xcd, 0xb7, 0x31, 0xa2, 0xbe, 0xa4);
		
		/// <summary>
		/// DomainRole Atributo
		/// Description for UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.Atributo
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo/Atributo.DisplayName", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo/Atributo.Description", typeof(global::UPM_IPS.DRMRRBRRMProyectoIPS.DRMRRBRRMProyectoIPSDomainModel), "UPM_IPS.DRMRRBRRMProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Clase", PropertyDisplayNameKey="UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo/Atributo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("15c2d37f-3376-4dc2-9e5a-cdb731a2bea4")]
		public virtual Atributo Atributo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Atributo)DslModeling::DomainRoleInfo.GetRolePlayer(this, AtributoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AtributoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Atributo of a Clase
		/// <summary>
		/// Gets a list of Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Atributo> GetAtributo(Clase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Atributo>, Atributo>(element, ClaseDomainRoleId);
		}
		#endregion
		#region Clase link accessor
		/// <summary>
		/// Get the list of ClaseHasAtributo links to a Clase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo> GetLinksToAtributo ( global::UPM_IPS.DRMRRBRRMProyectoIPS.Clase claseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo>(claseInstance, global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.ClaseDomainRoleId);
		}
		#endregion
		#region Atributo link accessor
		/// <summary>
		/// Get the ClaseHasAtributo link to a Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo GetLinkToClase (global::UPM_IPS.DRMRRBRRMProyectoIPS.Atributo atributoInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo>(atributoInstance, global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.AtributoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Atributo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClaseHasAtributo instance accessors
		
		/// <summary>
		/// Get any ClaseHasAtributo links between a given Clase and a Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo> GetLinks( global::UPM_IPS.DRMRRBRRMProyectoIPS.Clase source, global::UPM_IPS.DRMRRBRRMProyectoIPS.Atributo target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo>(source, global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.ClaseDomainRoleId);
			foreach ( global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo link in links )
			{
				if ( target.Equals(link.Atributo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClaseHasAtributo link between a given Claseand a Atributo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo GetLink( global::UPM_IPS.DRMRRBRRMProyectoIPS.Clase source, global::UPM_IPS.DRMRRBRRMProyectoIPS.Atributo target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo>(source, global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo.ClaseDomainRoleId);
			foreach ( global::UPM_IPS.DRMRRBRRMProyectoIPS.ClaseHasAtributo link in links )
			{
				if ( target.Equals(link.Atributo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
